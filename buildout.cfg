[buildout]
extensions = mr.developer
parts =
        server.run
        bootswatch

auto-checkout =
        mete0r.recipe.whoami
        mete0r.hostsman
        kotti
        bootswatch

show-picked-versions = true


[sources]
mete0r.recipe.whoami = git https://github.com/mete0r/recipe.whoami.git
mete0r.hostsman = git https://github.com/mete0r/hostsman.git
kotti = git https://github.com/Kotti/Kotti.git
bootswatch = git https://github.com/thomaspark/bootswatch.git egg=false


[versions]
colander = 1.0a1


[bootswatch]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds =
        mkdir -p ${:target-directory}
        ln -sf ${:source-directory}/bootstrap.css ${:target-directory}/
        ln -sf ${:source-directory}/bootstrap.min.css ${:target-directory}/

source-directory = ${buildout:directory}/src/bootswatch/${:theme}
target-directory = ${server.docroot:directory}/fanstatic/bootstrap/css
theme = flatly

[server]
recipe = zc.recipe.deployment
name = kotti.mete0r.dev
admin = root@localhost
user = ${server.whoami:user}
etc-user = ${:user}
group = ${server.whoami:group}

prefix=${buildout:directory}


[server.whoami]
recipe = mete0r.recipe.whoami


[server.docroot]
recipe = z3c.recipe.mkdir
paths = ${:directory}
mode = 0755

directory = ${server:var-prefix}/www


[server.ini]
recipe = collective.recipe.template
mode   = 0644
output = ${server:etc-directory}/server.ini
input  =
        inline:
        # Documentation for this file is available at:
        #   kotti.readthedocs.org/en/latest/index.html#configuration-and-customization

        [app:kotti]
        use = egg:kotti

        # kotti.site_title: your site's title
        kotti.site_title = ${server:name}


        # kotti.secret: defines the initial password of the 'admin' user
        kotti.secret = qwerty


        # sqlalchemy.url: the database that you want to use, defaults to SQLite
        # see http://www.sqlalchemy.org/docs/core/engines.html#database-urls
        sqlalchemy.url = sqlite:///${server:lib-directory}/Kotti.db


        # mail.default_sender: configure the 'from' address of emails sent by Kotti
        mail.default_sender = yourname@yourhost


        # kotti.includes: include add-ons; an example:
        # kotti.includes = kotti_twitter.include_search_widget


        # kotti.configurators: another hook for add-ons
        # kotti_tinymce should always be present (unless you don't want WYSIWYG editing)
        kotti.configurators = kotti_tinymce.kotti_configure


        # kotti.asset_overrides: override Kotti's templates and resources; an example:
        # kotti.asset_overrides = mypackage:kotti-overrides/


        # pyramid.default_locale_name: set the user interface language
        pyramid.default_locale_name = ko

        kotti.url_normalizer.map_non_ascii_characters = False
        kotti.register = True


        pyramid.includes =
          pyramid_tm
        #  pyramid_debugtoolbar


        [filter:fanstatic]
        use = egg:fanstatic#fanstatic


        [pipeline:main]
        pipeline =
            fanstatic
            kotti


[server.wsgi]
recipe = collective.recipe.modwsgi
eggs =
        kotti
        pastedeploy
config-file = ${server.ini:output}
target = ${buildout:directory}/parts/server.wsgi


[server.apache2.site]
recipe = collective.recipe.template
output = ${buildout:parts-directory}/apache2site
mode   = 0600
input  =
        inline:
        <VirtualHost *:80>
                ServerAdmin ${server:admin}
                ServerName ${server:name}

                <Directory />
                        Options FollowSymLinks
                        AllowOverride None
                </Directory>

                DocumentRoot ${:docroot-dir}
                <Directory ${:docroot-dir}>
                        Options Indexes FollowSymLinks MultiViews
                        AllowOverride None
                        Order deny,allow
                        Allow from all
                </Directory>

                Alias /fanstatic/bootstrap/css/ ${server.docroot:directory}/fanstatic/bootstrap/css/

                WSGIPassAuthorization On
                WSGIDaemonProcess ${server:name} user=${:user} group=${:group}
                WSGIProcessGroup ${server:name}
                WSGIApplicationGroup %{GLOBAL}
                WSGIScriptAlias / ${server.wsgi:target}

                ErrorLog ${server:log-directory}/error.log
                LogLevel warn
                CustomLog ${server:log-directory}/access.log combined
        </VirtualHost>

docroot-dir = ${server.docroot:directory}/

user=${server:user}
group=${server:group}


[server.manage]
recipe = zc.recipe.egg
eggs =
        mete0r.hostsman


hostsman = ${buildout:bin-directory}/hostsman


[server.install]
recipe = collective.recipe.template
output = ${buildout:bin-directory}/server.install
mode = 0755
input =
        inline:
        #!/bin/sh
        set -e
        ${server.uninstall:output} > /dev/null 2> /dev/null
        ln -sf "${:source}" "${:target}"
        a2ensite ${server:name}
        ${server.reload:output} > /dev/null 2> /dev/null
        ${server.manage:hostsman} put ${server:name}=127.0.0.1

source = ${server.uninstall:source}
target = ${server.uninstall:target}


[server.uninstall]
recipe = collective.recipe.template
output = ${buildout:bin-directory}/server.uninstall
mode = 0755
input =
        inline:
        #!/bin/sh
        ${server.manage:hostsman} delete ${server:name}
        a2dissite ${server:name}
        [ ! "$(readlink -f '${:target}')" -ef "${:source}" ] || rm -f "${:target}"
        ${server.reload:output} > /dev/null 2> /dev/null

source = ${server.apache2.site:output}
target = /etc/apache2/sites-available/${server:name}


[server.reload]
recipe = collective.recipe.template
output = ${buildout:bin-directory}/server.reload
mode = 0755
input = 
        inline:
        #!/bin/sh
        service apache2 reload


[server.run]
recipe = collective.recipe.template
output = ${buildout:bin-directory}/server.run
mode = 0755
input =
        inline:
        #!/bin/sh
        set -e
        TTYSTATE=`stty -g`
        trap "stty $TTYSTATE; ${server.uninstall:output}" EXIT
        trap '${server.reload:output}' QUIT
        trap 'exit 0' INT

        ${server.install:output}

        stty -echo -echoctl
        echo 'Ctrl-C to exit'
        echo 'Ctrl-\ to reload'
        while /bin/true; do
                sleep 1 || echo -n '';
        done
